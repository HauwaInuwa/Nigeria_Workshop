path <- "C:/Users/oy1r22/OneDrive - University of Southampton/Desktop/Day2/"
setwd(path)
##----Simple regression
#-- Load data
simple <- read.csv("simple_reg.csv")
names(simple)
##----Check for linearity and Normality
with(simple,plot(happiness ~ income))
hist(simple$happiness)
###
fit <- lm(happiness ~ income, data=simple)
summary(fit)
plot(fit)
plot(fit)
##----Multiple regression
#--Load data
multiple <- read.csv("multi_reg.csv")
names(multiple)
fit2 <-lm(heart.disease ~ biking + smoking, data = multiple)
summary(fit2)
par(mfrow=c(2,2))
plot(fit2)
par(mfrow=c(1,1))
# draw linear model DAG
dagify(
Y ~ mu,
Y ~ sigma,
mu ~ alpha,
mu ~ beta,
mu ~ X,
outcome = 'Y'
) %>%
tidy_dagitty(seed=11) %>%
mutate(color=c('data','parameter',  'parameter','parameter',  'parameter','data')) %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend, color=color,shape=color)) +
geom_dag_point() +
geom_dag_edges() +
geom_dag_text(col = "grey20",size=6,  parse=T) +
scale_shape_manual(values=c(15,19))+
theme_dag()+ labs(title = 'Graph of a linear regression', color='', shape='')
#--:
# load libraries
library(tidyverse) # managing data
library(ggdag) # drawing DAG
library(kableExtra) # visualising table
library(here) # handling path
library(rstan) # running Bayesian models
# draw linear model DAG
dagify(
Y ~ mu,
Y ~ sigma,
mu ~ alpha,
mu ~ beta,
mu ~ X,
outcome = 'Y'
) %>%
tidy_dagitty(seed=11) %>%
mutate(color=c('data','parameter',  'parameter','parameter',  'parameter','data')) %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend, color=color,shape=color)) +
geom_dag_point() +
geom_dag_edges() +
geom_dag_text(col = "grey20",size=6,  parse=T) +
scale_shape_manual(values=c(15,19))+
theme_dag()+ labs(title = 'Graph of a linear regression', color='', shape='')
library(ggdag) # drawing DAG
install.packages("ggdag")
#--:
# load libraries
library(tidyverse) # managing data
install.packages("ggdag")
install.packages("ggdag")
install.packages("ggdag")
install.packages("ggdag")
#--:
# load libraries
library(tidyverse) # managing data
library(ggdag) # drawing DAG
library(kableExtra) # visualising table
library(here) # handling path
library(rstan) # running Bayesian models
# draw linear model DAG
dagify(
Y ~ mu,
Y ~ sigma,
mu ~ alpha,
mu ~ beta,
mu ~ X,
outcome = 'Y'
) %>%
tidy_dagitty(seed=11) %>%
mutate(color=c('data','parameter',  'parameter','parameter',  'parameter','data')) %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend, color=color,shape=color)) +
geom_dag_point() +
geom_dag_edges() +
geom_dag_text(col = "grey20",size=6,  parse=T) +
scale_shape_manual(values=c(15,19))+
theme_dag()+ labs(title = 'Graph of a linear regression', color='', shape='')
#--:
# load libraries
library(tidyverse) # managing data
library(rstan) # running Bayesian models
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
#--:
# load libraries
library(tidyverse) # managing data
library(ggplot2) #visualization
library(ggdag) # drawing DAG
library(kableExtra) # visualising table
library(here) # handling path
library(rstan) # running Bayesian models
# draw linear model DAG
dagify(
Y ~ mu,
Y ~ sigma,
mu ~ alpha,
mu ~ beta,
mu ~ X,
outcome = 'Y'
) %>%
tidy_dagitty(seed=11) %>%
mutate(color=c('data','parameter',  'parameter','parameter',  'parameter','data')) %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend, color=color,shape=color)) +
geom_dag_point() +
geom_dag_edges() +
geom_dag_text(col = "grey20",size=6,  parse=T) +
scale_shape_manual(values=c(15,19))+
theme_dag()+ labs(title = 'Graph of a linear regression', color='', shape='')
# stan setup
options(mc.cores = parallel::detectCores()) #set up the maximum number of cores used by stan
rstan::rstan_options(auto_write = TRUE) # speed up running time
# Simulate data
seed <- 2004
set.seed(seed)
data <- tibble(y=rnorm(1e3, mean= 5, sd=50))
# plot simulated data
ggplot(data, aes(x=y))+
geom_histogram(bins = 50)+
theme_minimal()+
geom_vline(xintercept = mean(data$y), color='orange', size=1)+
annotate('text', x=15, y=30, label=paste0('Observed mean: ', round(mean(data$y),2)), colour='orange', angle=90)+
geom_segment(x=0,y=1, xend=sd(data$y), yend=1, colour='orange', size=1)+
annotate('text', x=50, y=4, label=paste0('Observed sd: ', round(sd(data$y),2)), colour='orange')+
labs(y='', x='observed y')+
theme(axis.text.y = element_blank())
# Normal model DAG
dagify(
Y ~ mu,
Y ~ sigma) %>%
tidy_dagitty(seed=41) %>%
mutate(color=c('parameter', 'parameter','data')) %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend, color=color,shape=color)) +
geom_dag_point() +
geom_dag_edges() +
geom_dag_text(col = "grey20",size=6,  parse=T) +
scale_shape_manual(values=c(15,19))+
theme_dag()+ labs(title = 'Model with simulated data: Normal distribution of Y', color='', shape='')
# define mu prior
data$prior_mu <- rnorm(1e3, mean= 0, sd=100)
ggplot(data)+
geom_histogram(aes(x=y, after_stat(density)), bins=50, fill='grey30')+
geom_density(aes(x=prior_mu), colour='#00BFC4', size=1)+
theme_minimal()+
annotate('text', y=0.0020, x=250, label=paste0('Normal(0,100)'), colour='#00BFC4', size=5)+
theme(axis.text.y = element_blank())+
labs(y='', x='observed y')
# define sigma prior
data$prior_sigma <- runif(1e3,min = 0, max = 200)
ggplot(data)+
geom_histogram(aes(x=y, after_stat(density)), bins=50, fill='grey30')+
geom_density(aes(x=prior_sigma), colour='#00BFC4', size=1, trim=T)+
theme_minimal()+
annotate('text', y=0.0060, x=150, label=paste0('Uniform(0,200)'), colour='#00BFC4', size=5)+
theme(axis.text.y = element_blank())+
labs(y='', x='observed y')
# prepare data for stan
stan_data <- list(
y = data$y,
n = nrow(data))
# mcmc settings
chains <- 4
warmup <- 250
iter <- 500
# parameters to monitor
pars <- c('mu','sigma')
# mcmc
fit <- rstan::stan(file = file.path('tutorial1_model.stan'),
data = stan_data,
iter = warmup + iter,
chains = chains,
warmup = warmup,
pars = pars,
seed = seed)
# parameters to monitor
pars <- c('mu','sigma')
# mcmc
fit <- rstan::stan(file = file.path('tutorial1_model.stan'),
data = stan_data,
iter = warmup + iter,
chains = chains,
warmup = warmup,
pars = pars,
seed = seed)
